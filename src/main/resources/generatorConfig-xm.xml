<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <context id="default" targetRuntime="MyBatis3">

        <!--自动序列化-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin" />

        <!-- 自动生成equals方法和hashcode方法 -->
        <!--<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>-->

        <plugin type="me.weix.whatever.plugins.LombokPlugin"/>

        <plugin type="me.weix.whatever.plugins.MapperPlugin"/>

        <commentGenerator type="me.weix.whatever.plugins.MyCommentGenerator">
            <property name="suppressAllComments" value="false" />
        </commentGenerator>

        <!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->
        <!--jdbc的数据库连接 -->
        <jdbcConnection
                driverClass="com.mysql.cj.jdbc.Driver"
                connectionURL="jdbc:mysql://10.241.151.210:3309/demandmanagement?useSSL=false&amp;serverTimezone=UTC"
                userId="root"
                password="123456">
        </jdbcConnection>

        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和
            NUMERIC 类型解析为java.math.BigDecimal -->
        <javaTypeResolver type="me.weix.whatever.plugins.MyJavaTypeResolver">
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <javaModelGenerator targetPackage="com.xm.pojo"
                            targetProject="src/main/java" >

            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="false"/>
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="true"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
            <!--实体类父类BasePojo-->
            <!--            <property name="rootClass" value="me.weix.whatever.core.base.BaseEntity"/>-->
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>

        </javaModelGenerator>

        <!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="mapper"
                         targetProject="src/main/resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
        -->
        <javaClientGenerator targetPackage="com.xm.mapper"
                             targetProject="src/main/java" type="XMLMAPPER">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>


        <table tableName="dm_project_demand_info" domainObjectName="ProjectDemandInfo" mapperName="DmProjectDemandInfoMapper"
               enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <property name="useActualColumnNames" value="false"/>
            <columnOverride column="summary" javaType="java.lang.String" jdbcType="TEXT"/>
            <columnOverride column="description" javaType="java.lang.String" jdbcType="TEXT"/>
            <columnOverride column="demand_remark" javaType="java.lang.String" jdbcType="TEXT"/>
        </table>

    </context>
</generatorConfiguration>
